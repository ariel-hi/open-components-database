#use-added-syntax(jitx)
defpackage ocdb/generator-utils:
  import core
  import collections
  import jitx
  import jitx/commands

  import ocdb/checks
  import ocdb/generic-components

  import jitx/powergen/gen

  import ocdb/design-vars


; =======================================
; Ciruit convenience functions
; =======================================

; Add load balancing caps to crystal oscillator
public defn add-xtal-caps (xtal:JITXObject, gnd:JITXObject, stray-capacitance:Double) :
  inside pcb-module:
    val c-load = property(xtal.load-capacitance)
    val c-bal = 2.0 * (c-load - stray-capacitance)
    cap-strap(xtal.p[1], gnd, c-bal)
    val c = cap-strap(xtal.p[2], gnd, c-bal)
    c 
; Default stray capacitance assumed 5pf. 
public defn add-xtal-caps (xtal:JITXObject, gnd:JITXObject) :
  add-xtal-caps(xtal, gnd, 5.0e-12)

; Add pullup resistors to an open-drain bus (like i2c) to vio pin. Specced for minimum power draw meeting speed requirements [TI app note:slva689].
public defn add-open-drain-pullups (bus:JITXObject, vio:JITXObject, clk-rate:Double, bus-capacitance:Double) :
  inside pcb-module:
    val rise-time = 0.35 / (clk-rate * 5.0) ; Signal bandwidth~ 5x clock rate for fairly sharp edge
    val r = closest-std-val(rise-time / (0.8473 * bus-capacitance), 10.0)
    to-tuple $ for p in ports(bus) seq :
      res-strap(p, vio, r)

; Default is 100kHz clock rate, 100pF bus capacitance.
public defn add-open-drain-pullups (bus:JITXObject, vio:JITXObject) :
  add-open-drain-pullups(bus, vio, 100.0e3, 100.0e-12)

; =======================================
; Piecewise linear functions
; Example call : PWL([[x0 y0] [x1 y1] ... [xn yn])[x]. Returns interpolated value of y at x
; =======================================
public deftype PWL
public defmulti get (f:PWL, x:Double) -> Double
public defn PWL (ps:Tuple<[Double,Double]>) -> PWL :
  new PWL :
    defmethod get (this, x:Double) :
      val n = length(ps)
      if x < ps[0][0] :
        ; println("Warning: PWL is extrapolating with zero-order hold")
        ps[0][1]
      else if x >= ps[0][0] and x <= ps[n - 1][0] :
        val i = for i in 0 to n find! :
          ps[i][0] >= x
        val j = for i in reverse(0 to n) find! :
          ps[i][0] <= x
        if i == j :
          ps[i][1]
        else :
          val dydx = (ps[i][1] - ps[j][1]) / (ps[i][0] - ps[j][0])
          dydx * (x - ps[j][0]) + ps[j][1]
      else if x > ps[n - 1][0] :
        ; println("Warning: PWL is extrapolating with zero-order hold")
        ps[n - 1][1]
      else  :
        fatal("Something is wrong in PWL with x = %_" % [x])

; =======================================
; Assign schematic and layout groups
; =======================================
public defn group-modules (mods:Tuple<Tuple<JITXObject>>) :
  inside pcb-module :
    val g-count = to-seq(0 to false)  
    for m in mods do :
      val g-name = Ref("g-sg-%_" % [next(g-count)])
      for r in m do :
        schematic-group(r) = (g-name)
        layout-group(r) = (g-name)

; =======================================
; This function is used to create a package mapping and box symbol from PinSpec
; =======================================
; public defn gen-symbol-map (ps:PinSpec, pkg:Ref) :
;   inside pcb-component :
;     make-pins(ps)
;     assign-landpattern(pkg, ps)
;     make-box-symbol(ps)

; =======================================
; Convience functions to add standard pin properties
; =======================================
; [TODO] these need to be reviewed. formerly used "inside properties"
public defn apply-voltage-rating-params (rated-voltage:[Double, Double]) :
  inside pcb-module :
    property(self.rated-voltage) = rated-voltage
    fatal("This function (apply-voltage-rating-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-power-pin-params (vdd:Double) :
  inside pcb-module :
    property(self.power-pin) = true
    property(self.vdd) = vdd
    fatal("This function (apply-power-pin-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-power-supply-pin-params (vdd:Double, max-current:Double) :
  inside pcb-module :
    property(self.power-pin) = true
    property(self.supply-pin) = true
    property(self.vdd) = vdd
    property(self.max-current) = vdd
    fatal("This function (apply-power-supply-pin-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-digital-io-params (vil:Double vih:Double vol:Double voh:Double) :
  inside pcb-module :
    property(self.digital-io) = true
    property(self.type) = "io"
    property(self.vil) = vil
    property(self.vih) = vih
    property(self.vol) = vol
    property(self.voh) = voh
    fatal("This function (apply-digital-io-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-digital-input-params (vil:Double vih:Double) :
  inside pcb-module :
    property(self.digital-io) = true
    property(self.type) = "i"
    property(self.vil) = vil
    property(self.vih) = vih
    fatal("This function (apply-digital-input-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-enable-pin-params (enable:Ref) :
  inside pcb-module :
    property(self.digital-io) = true
    property(self.type) = "i"
    property(self.enable-pin) = true
    property(self.active-ref) = enable
    fatal("This function (apply-enable-pin-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-digital-output-params (vil:Double vih:Double) :
  inside pcb-module :
    property(self.digital-io) = true
    property(self.type) = "o"
    property(self.vil) = vil
    property(self.vih) = vih 
    fatal("This function (apply-digital-output-params) is deprecated. Replace this in generator-utils.stanza.")

public defn apply-lvds-params (vol:Double, voh:Double, vo-diff:[Double,Double,Double] vo-cm:[Double,Double,Double] vi-diff:[Double,Double,Double] vi-cm:[Double,Double,Double]) :
  inside pcb-module :
    property(self.lvds) = true
    property(self.voh) = voh 
    property(self.vol) = vol 
    property(self.vo-diff) = vo-diff 
    property(self.vo-cm) = vo-cm   
    property(self.vi-diff) = vi-diff 
    property(self.vi-cm) = vi-cm   
    fatal("This function (apply-lvds-params) is deprecated. Replace this in generator-utils.stanza.")


; [TODO] replace usages of the above functions with the ones below

public defn apply-voltage-rating-params (obj:JITXObject, rated-voltage:[Double, Double]) :
  inside pcb-module :
    property(obj.rated-voltage) = rated-voltage

public defn apply-power-pin-params (obj:JITXObject, vdd:Double) :
  inside pcb-module :
    property(obj.power-pin) = true
    property(obj.vdd) = vdd

public defn apply-power-supply-pin-params (obj:JITXObject, vdd:Double, max-current:Double) :
  inside pcb-module :
    property(obj.power-pin) = true
    property(obj.supply-pin) = true
    property(obj.vdd) = vdd
    property(obj.max-current) = vdd

public defn apply-digital-io-params (obj:JITXObject, vil:Double vih:Double vol:Double voh:Double) :
  inside pcb-module :
    property(obj.digital-io) = true
    property(obj.type) = "io"
    property(obj.vil) = vil
    property(obj.vih) = vih
    property(obj.vol) = vol
    property(obj.voh) = voh

public defn apply-digital-input-params (obj:JITXObject, vil:Double vih:Double) :
  inside pcb-module :
    property(obj.digital-io) = true
    property(obj.type) = "i"
    property(obj.vil) = vil
    property(obj.vih) = vih

public defn apply-enable-pin-params (obj:JITXObject, enable:JITXObject) :
  inside pcb-module :
    property(obj.digital-io) = true
    property(obj.type) = "i"
    property(obj.enable-pin) = true
    property(obj.active-ref) = enable

public defn apply-digital-output-params (obj:JITXObject, vil:Double vih:Double) :
  inside pcb-module :
    property(obj.digital-io) = true
    property(obj.type) = "o"
    property(obj.vil) = vil
    property(obj.vih) = vih

public defn apply-lvds-params (obj:JITXObject, vol:Double, voh:Double, vo-diff:[Double,Double,Double] vo-cm:[Double,Double,Double] vi-diff:[Double,Double,Double] vi-cm:[Double,Double,Double]) :
  inside pcb-module :
    property(obj.lvds) = true
    property(obj.voh) = voh 
    property(obj.vol) = vol 
    property(obj.vo-diff) = vo-diff 
    property(obj.vo-cm) = vo-cm   
    property(obj.vi-diff) = vi-diff 
    property(obj.vi-cm) = vi-cm   


;================
; Check utilities
;================
; User defined pass that gets run at end of design pipeline
;<checks>
public pcb-check final-pass ():
  ; println("Final pass")
  defn propogate-voltage (n:NetStmt) :
    val supply-pin  = for p in refs(n) find : has-property?(p.voltage)
    if supply-pin is Ref :
      val sp = supply-pin as Ref
      if has-property?(sp.voltage) : 
        val v = property(sp.voltage)
        for p in refs(n) do :
          if has-property?(p.supply-pin) :
            if property(p.voltage) != v :
              println("Incompatible supply voltages on same net.")
          else :
            inside pcb-module:
              properties({p}):
                voltage => v
  for n in nets(self) do :
    propogate-voltage(n)

public defn check-design () :
  inside pcb-module:
    ; check final-pass()

    for (instance in all-component-instances(self)) do :
      property(instance.temperature) = OPERATING-TEMPERATURE
      ; Check components
      if has-property?(instance.resistor) :
        check resistor-check(instance)
      if has-property?(instance.capacitor) :
        check capacitor-check(instance)

    check enable-pins()
    check io()
;<checks>

public defn check-oscillator (o:JITXObject, intf:JITXObject, load-cap:JITXObject) :
  inside pcb-module:
    check oscillator-check-frequency(o, intf)
    check oscillator-check-gain(o, intf, load-cap)
    check oscillator-check-drive(o, intf, load-cap)
    check oscillator-check-pullability(o, intf, load-cap)

;<checks>
public pcb-check enable-pins ():
  inside pcb-module :
    for i in all-component-instances(self) do :
      for p in all-pins(i) do :
        if has-property?(p.enable-pin) :
          #CHECK(connected?(p))

public defn default-enable ():
  inside pcb-module :
    for i in all-component-instances(self) do :
      for p in all-pins(i) do :
        if has-property?(p.enable-pin) :
          println("Wiring %_ to %_ for enable." % [p property(p.active-ref)])
          net (p i.property(p.active-ref))
;<checks>

public defn connect-floating-inputs-to-gnd ():
  inside pcb-module :
    for i in component-instances(self) do :
      for p in pins(i) do :
        ; println("Is %_ connected? %_" % [p, connected?(p)])
        if not connected?(p) and
           has-property?(p.digital-io) and
           property(p.type) == "i" :
          println("Connecting floating input %_ to gnd." % [p])
          net (p, self.gnd)

public defn connect-gnd-pins ():
  inside pcb-module :
    for i in instances(self) do :
      for p in ports(i) do :
        val port-name = tail(ref(p), ref-length(ref(p)) - 1)
        if port-name == Ref("gnd") :
          net (self.gnd, p)

; =======================================
; Attach the power generator to designs and loads.
; =======================================
public defn generate-power () :
  println("JITPCB: Generating power system.")
  inside pcb-module :
    for i in component-instances(self) do :
      for p in pins(i) do : ; [TODO] public-pins or pins?
        if has-property?(p.power-request) :
          val [v a n] = property(p.power-request)
          within (rail) = make-load("Load", v, a, n) :
            net (p, pos(rail))
            net (property(p.gnd-ref), neg(rail))

    for i in component-instances(self) do :
      for p in pins(i) do : ; [TODO] public-pins or pins?
        if has-property?(p.power-input) :
          generate-power-system(property(p.power-input), OPERATING-TEMPERATURE[1], p, property(p.gnd-ref))

public defn set-power-source (pos:JITXObject, neg:JITXObject, v-in:Double):
  inside pcb-module:
    property(pos.power-input) = v-in
    property(pos.gnd-ref) = neg
