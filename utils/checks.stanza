#use-added-syntax(jitx)
defpackage ocdb/checks:
  import core
  import collections
  import math
  import jitx
  import jitx/commands
  import ocdb/defaults
  import ocdb/space-derating
  import ocdb/generator-utils



;<notes>

io :
  nets on self isnt allowed
  has-property?{_.digital-io} syntax -- does this work?

resistor-check :
  lookup - spice?

pcb-check can only be called from a module.
change macro to set "inside pcb-module" implicitly

;<notes>

; public pcb-check io () :
;   for n in nets(self) do :
;     ; Check compatibility between two single-ended logic pins (bi directional checks)
;     if (length(refs(n))  == 2) and all?(has-property?{_.digital-io}, refs(n)) : 
;       val p = refs(n)
;       if property(p[0].type) == "io" and 
;          property(p[1].type) == "io" :
;         #CHECK(property(p[0].vOH) >= property(p[1].vIH))
;         #CHECK(property(p[0].vOH) <= property(p[1].rated-voltage)[1])
;         #CHECK(property(p[0].vOL) <= property(p[1].vIL))
;         #CHECK(property(p[0].vOL) >= property(p[1].rated-voltage)[0])
;         #CHECK(property(p[1].vOH) >= property(p[0].vIH))
;         #CHECK(property(p[1].vOH) <= property(p[0].rated-voltage)[1])
;         #CHECK(property(p[1].vOL) <= property(p[0].vIL))
;         #CHECK(property(p[1].vOL) >= property(p[0].rated-voltage)[0])
;       else if property(p[0].type) == "i" and 
;               property(p[1].type) == "o" :
;         #CHECK(property(p[1].vOH) >= property(p[0].vIH))
;         #CHECK(property(p[1].vOH) <= property(p[0].rated-voltage)[1])
;         #CHECK(property(p[1].vOL) <= property(p[0].vIL))
;         #CHECK(property(p[1].vOL) >= property(p[0].rated-voltage)[0])
;       else if property(p[0].type) == "o" and 
;               property(p[1].type) == "i" :
;         #CHECK(property(p[0].vOH) >= property(p[1].vIH))
;         #CHECK(property(p[0].vOH) <= property(p[1].rated-voltage)[1])
;         #CHECK(property(p[0].vOL) <= property(p[1].vIL))
;         #CHECK(property(p[0].vOL) >= property(p[1].rated-voltage)[0])
;       else :
;         println("Invalid logic connection between: %_ and %_" % [property(p[0].type) property(p[1].type)])
;         #CHECK(false)
;     ; Check compatibility between lvds pairs (bi directional checks)
;     if (length(refs(n))  == 2) and all?(has-property?{_.lvds}, refs(n)) : 
;       val p = refs(n)
;       #CHECK(property(p[0].vo-cm)[2]   <= property(p[1].vi-cm)[2])
;       #CHECK(property(p[0].vo-diff)[0] >= property(p[1].vi-diff)[0])
;       #CHECK(property(p[1].vo-cm)[2]   <= property(p[0].vi-cm)[2])
;       #CHECK(property(p[1].vo-diff)[0] >= property(p[0].vi-diff)[0])

; Checks a power pin located on a component
public pcb-check power-pin (p:JITXObject) :
  #CHECK(has-property?(p.power-pin))
  #CHECK(has-property?(p.voltage))
  if has-property?(p.voltage):
    check-rated-voltage(p)

defn check-rated-voltage (p:JITXObject) :
  val rating = property(p.rated-voltage)
  val v = property(p.voltage)
  match(rating, v):
    (r:Double, v:Double) : #CHECK(property(p.rated-voltage) >= v)
    (r:[Double,Double], v:Double) : 
      #CHECK(property(p.rated-voltage)[1] >= v)
      #CHECK(property(p.rated-voltage)[0] <= v)
    (r:[Double,Double], v:[Double|Double|Double]) : 
      #CHECK(property(p.rated-voltage)[1] >= v[2])
      #CHECK(property(p.rated-voltage)[0] <= v[0])
    (r, v) : false

; Checks if voltage on a pin is within acceptable limits
public pcb-check voltage-levels (p:JITXObject, range:[Double,Double,Double]) :
  #CHECK(has-property?(p.voltage))
  #CHECK(property(p.voltage)[0] >= range[0])
  #CHECK(property(p.voltage)[2] <= range[2])

; Checks resistors agains operating point and environment
public pcb-check resistor-check (r:JITXObject) :
  #CHECK(has-property?(r.resistor))
  #CHECK(has-property?(r.operating-point))
  val [vpk i temp] = [lookup(property(r.operating-point), `voltage-pk) lookup(property(r.operating-point), `current-rms) property(r.temperature)]
  val power = property(r.resistance) * pow(i, 2.0)
  #CHECK(abs(vpk[0]) <= property(r.rated-voltage))
  #CHECK(abs(vpk[1]) <= property(r.rated-voltage))
  if has-property?(r.derating) :
    ; Derate the power based on the piecewise linear curve from MFG
    val derating = PWL(property(r.derating))[temp]
    val pwr = derating * property(r.rated-power)
    #CHECK(pwr * DERATE-RESISTOR-POWER > power)
  else :
    #CHECK(property(r.rated-power) * DERATE-RESISTOR-POWER > power)

public pcb-check capacitor-check (c:JITXObject) :
  #CHECK(has-property?(c.capacitor))
  #CHECK(has-property?(c.operating-point))
  val [vpk temp] = [lookup(property(c.operating-point), `voltage-pk) property(c.temperature)]
  switch(property(c.type)) :

    "ceramic" :
      val vpk-derate-wc = PWL(DERATE-CAPACITOR-MLCC-VPK-WC)[temp]
      #CHECK(vpk[0] <= (vpk-derate-wc * property(c.rated-voltage)))
      #CHECK(vpk[1] <= (vpk-derate-wc * property(c.rated-voltage)))
      val vpk-derate-nom = PWL(DERATE-CAPACITOR-MLCC-VPK-NOM)[temp]
      #CHECK(vpk[0] <= (vpk-derate-nom * property(c.rated-voltage)))
      #CHECK(vpk[1] <= (vpk-derate-nom * property(c.rated-voltage)))
      #CHECK(temp <= min(DERATE-CAPACITOR-MLCC-TEMP, property(c.rated-temperature)[1]))

    "electrolytic" :
      #CHECK(has-property?(c.anode))
      #CHECK(has-property?(c.electrolyte))
      val [i-pk i-rms] = [lookup(property(c.operating-point), `current-pk) lookup(property(c.operating-point), `current-rms)]

      if (property(c.anode) == "tantalum" and property(c.electrolyte) == "polymer") :
        #CHECK(vpk[1]   <= (DERATE-CAPACITOR-ETANTPOLY-VPK * property(c.rated-voltage)))
        #CHECK(temp  <= min(DERATE-CAPACITOR-ETANTPOLY-TEMP, property(c.rated-temperature)[1]))
        #CHECK(i-pk  <= property(c.rated-current-pk))
        #CHECK(i-rms <= PWL(property(c.rated-current-rms))[temp])
        #CHECK(vpk[0]  >= 0.0)

      else if (property(c.anode) == "tantalum" and property(c.electrolyte) == "manganese-dioxide") :
        #CHECK(i-pk <= property(c.rated-current-pk))
        #CHECK(i-rms <= PWL(property(c.rated-current-rms))[temp])
        #CHECK(vpk[0]  >= 0.0)
        if i-pk <= 2.0 :
          val vpk-derate-wc = PWL(DERATE-CAPACITOR-ETANTMNO2-VPK-WC)[temp]
          val vpk-derate-nom = PWL(DERATE-CAPACITOR-ETANTMNO2-VPK-NOM)[temp]
          #CHECK(vpk[1]  <= (vpk-derate-wc * property(c.rated-voltage)))
          #CHECK(vpk[1]  <= (vpk-derate-nom * property(c.rated-voltage)))
          #CHECK(temp <= min(DERATE-CAPACITOR-ETANTMNO2-TEMP-NOM, property(c.rated-temperature)[1]))
          #CHECK(temp <= min(DERATE-CAPACITOR-ETANTMNO2-TEMP-WC, property(c.rated-temperature)[1]))
        else if i-pk > 2.0 :
          #CHECK(vpk[1]  <= (DERATE-CAPACITOR-ETANTMNO2-VPK * property(c.rated-voltage)))
          #CHECK(temp <= min(DERATE-CAPACITOR-ETANTMNO2-TEMP-NOM, property(c.rated-temperature)[1]))

      else :
        println("Unhandled electrolytic type for capacitor check on %_" % [c])

    "mica" :
      #CHECK(vpk[0] <= (DERATE-CAPACITOR-MICA-VPK * property(c.rated-voltage)))
      #CHECK(vpk[1] <= (DERATE-CAPACITOR-MICA-VPK * property(c.rated-voltage)))
      #CHECK(temp <= min(DERATE-CAPACITOR-MICA-TEMP, property(c.rated-temperature)[1]))

    else : println("Unhandled type for capacitor check on %_" % [c])

  #CHECK(temp >= property(c.rated-temperature)[0])

; Checks the critical gain and drive level of an oscillator (o) against an interface on an IC (intf)
public pcb-check oscillator-check-frequency (o:JITXObject, intf:JITXObject) :
  ; Check critical gain point to ensure oscillation
  #CHECK(has-property?(o.frequency))
  #CHECK(has-property?(intf.frequency))
  #CHECK(property(o.frequency) == property(intf.frequency))
public pcb-check oscillator-check-gain (o:JITXObject, intf:JITXObject, load-cap:JITXObject) :
  ; Check critical gain point to ensure oscillation
  #CHECK(has-property?(o.shunt-capacitance))
  #CHECK(has-property?(o.load-capacitance))
  #CHECK(has-property?(o.ESR))
  #CHECK(has-property?(o.frequency))
  #CHECK(has-property?(intf.max-critical-gain))
  val gain = 4.0 * property(o.ESR) * pow(2.0 * PI * property(o.frequency), 2.0) * pow(property(o.shunt-capacitance) + property(o.load-capacitance), 2.0)
  #CHECK(gain < property(intf.max-critical-gain))
public pcb-check oscillator-check-drive (o:JITXObject, intf:JITXObject, load-cap:JITXObject) :
  ; Check drive level against crystal maximum
  #CHECK(has-property?(intf.drive-level))
  #CHECK(has-property?(o.max-drive-level))
  #CHECK(property(intf.drive-level) < property(o.max-drive-level))
  ; Check pullability of crystal to ensure accuracy
public pcb-check oscillator-check-pullability (o:JITXObject, intf:JITXObject, load-cap:JITXObject) :
  #CHECK(has-property?(o.motional-capacitance))
  val pullability = property(o.motional-capacitance) / (2.0 * pow((property(o.shunt-capacitance) + property(o.load-capacitance)), 2.0))
  #CHECK(has-property?(load-cap.tolerance))
  #CHECK(has-property?(load-cap.capacitance))
  val dC = (property(load-cap.capacitance) as Double) * (property(load-cap.tolerance)[1] as Double)
  val freq-error = (pullability as Double) * (dC as Double)
  #CHECK(has-property?(o.frequency-tolerance))
  #CHECK(has-property?(intf.frequency-tolerance))
  #CHECK(property(o.frequency-tolerance) + freq-error < property(intf.frequency-tolerance))
